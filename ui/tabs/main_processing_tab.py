# vcpmctool/ui/tabs/main_processing_tab.py
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QSplitter,
    QPushButton, QLabel, QLineEdit, QCheckBox,
    QListWidget, QTableWidget, QTableWidgetItem,
    QTextEdit, QProgressBar, QGroupBox, QFormLayout,
    QFileDialog, QMessageBox, QHeaderView
)
from PySide6.QtCore import Qt, QThread, Signal, QTimer
from PySide6.QtGui import QFont
import pandas as pd
from pathlib import Path

from core.pipeline import process_files
from services.settings import Settings
from services.logger import Logger


class ProcessingWorker(QThread):
    """Worker thread ƒë·ªÉ x·ª≠ l√Ω file kh√¥ng block UI"""
    
    progress_updated = Signal(int)
    status_updated = Signal(str)
    finished = Signal(pd.DataFrame, bool)
    error_occurred = Signal(str)
    
    def __init__(self, files, initial_term, ext_term, logger, auto_proper):
        super().__init__()
        self.files = files
        self.initial_term = initial_term
        self.ext_term = ext_term
        self.logger = logger
        self.auto_proper = auto_proper
        
    def run(self):
        try:
            self.status_updated.emit("ƒêang x·ª≠ l√Ω file...")
            self.progress_updated.emit(10)
            
            results, success = process_files(
                self.files,
                self.initial_term,
                self.ext_term,
                self.logger,
                auto_backup=True,
                auto_proper=self.auto_proper
            )
            
            self.progress_updated.emit(100)
            self.status_updated.emit("Ho√†n t·∫•t!" if success else "Ho√†n t·∫•t v·ªõi c·∫£nh b√°o")
            self.finished.emit(results, success)
            
        except Exception as e:
            self.error_occurred.emit(str(e))


class MainProcessingTab(QWidget):
    """Tab x·ª≠ l√Ω ch√≠nh"""
    
    def __init__(self, settings: Settings, logger: Logger):
        super().__init__()
        self.settings = settings
        self.logger = logger
        self.selected_files = []
        self.worker = None
        
        self._setup_ui()
        
    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        layout = QHBoxLayout(self)
        
        # Splitter ch√≠nh
        splitter = QSplitter(Qt.Orientation.Horizontal)
        layout.addWidget(splitter)
        
        # Panel tr√°i - Input v√† Options
        left_panel = self._create_left_panel()
        splitter.addWidget(left_panel)
        
        # Panel ph·∫£i - Preview v√† Log
        right_panel = self._create_right_panel()
        splitter.addWidget(right_panel)
        
        # Thi·∫øt l·∫≠p t·ª∑ l·ªá splitter
        splitter.setSizes([400, 800])
        
    def _create_left_panel(self) -> QWidget:
        """T·∫°o panel tr√°i"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # File selection group
        file_group = QGroupBox("üìÅ Ch·ªçn file ƒë·∫ßu v√†o")
        file_layout = QVBoxLayout(file_group)
        
        self.select_btn = QPushButton("Ch·ªçn file Excel")
        self.select_btn.clicked.connect(self.select_files)
        file_layout.addWidget(self.select_btn)
        
        self.file_list = QListWidget()
        self.file_list.setMaximumHeight(150)
        file_layout.addWidget(self.file_list)
        
        layout.addWidget(file_group)
        
        # Options group
        options_group = QGroupBox("‚öôÔ∏è T√πy ch·ªçn")
        options_layout = QFormLayout(options_group)
        
        self.initial_term_edit = QLineEdit("2")
        self.initial_term_edit.setToolTip("Th·ªùi h·∫°n ban ƒë·∫ßu t√≠nh b·∫±ng nƒÉm")
        options_layout.addRow("Th·ªùi h·∫°n ban ƒë·∫ßu (nƒÉm):", self.initial_term_edit)
        
        self.ext_term_edit = QLineEdit("2")
        self.ext_term_edit.setToolTip("Th·ªùi h·∫°n gia h·∫°n t√≠nh b·∫±ng nƒÉm")
        options_layout.addRow("Th·ªùi h·∫°n gia h·∫°n (nƒÉm):", self.ext_term_edit)
        
        self.auto_proper_cb = QCheckBox("T·ª± ƒë·ªông ƒë·ªãnh d·∫°ng t√™n ri√™ng (Proper Case)")
        self.auto_proper_cb.setChecked(self.settings.auto_propercase)
        self.auto_proper_cb.setToolTip("T·ª± ƒë·ªông vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu c·ªßa t·ª´ng t·ª´")
        options_layout.addRow(self.auto_proper_cb)
        
        layout.addWidget(options_group)
        
        # Process button
        self.process_btn = QPushButton("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω")
        self.process_btn.setEnabled(False)
        self.process_btn.clicked.connect(self.process_files)
        self.process_btn.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 10px;
                font-weight: bold;
                border-radius: 6px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #218838;
            }
            QPushButton:disabled {
                background-color: #6c757d;
                color: #ffffff;
            }
        """)
        layout.addWidget(self.process_btn)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # Status label
        self.status_label = QLabel("S·∫µn s√†ng")
        self.status_label.setStyleSheet("color: #666666; font-style: italic;")
        layout.addWidget(self.status_label)
        
        layout.addStretch()
        
        return widget
        
    def _create_right_panel(self) -> QWidget:
        """T·∫°o panel ph·∫£i"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Splitter d·ªçc cho preview v√† log
        splitter = QSplitter(Qt.Orientation.Vertical)
        layout.addWidget(splitter)
        
        # Preview table
        preview_group = QGroupBox("üëÅÔ∏è Xem tr∆∞·ªõc k·∫øt qu·∫£")
        preview_layout = QVBoxLayout(preview_group)
        
        self.preview_table = QTableWidget()
        self.preview_table.setAlternatingRowColors(True)
        self.preview_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.preview_table.horizontalHeader().setStretchLastSection(True)
        preview_layout.addWidget(self.preview_table)
        
        splitter.addWidget(preview_group)
        
        # Log panel
        log_group = QGroupBox("üìù Nh·∫≠t k√Ω x·ª≠ l√Ω")
        log_layout = QVBoxLayout(log_group)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setMaximumHeight(200)
        self.log_text.setFont(QFont("Consolas", 9))
        log_layout.addWidget(self.log_text)
        
        splitter.addWidget(log_group)
        
        # Thi·∫øt l·∫≠p t·ª∑ l·ªá splitter
        splitter.setSizes([500, 200])
        
        return widget
        
    def select_files(self):
        """Ch·ªçn file ƒë·∫ßu v√†o"""
        files, _ = QFileDialog.getOpenFileNames(
            self,
            "Ch·ªçn file Excel",
            "",
            "Excel Files (*.xlsx *.xls)"
        )
        
        if files:
            self.selected_files = files
            self.file_list.clear()
            
            for file_path in files:
                self.file_list.addItem(Path(file_path).name)
                
            self.process_btn.setEnabled(True)
            self.add_log(f"ƒê√£ ch·ªçn {len(files)} file")
            
    def process_files(self):
        """X·ª≠ l√Ω file"""
        if not self.selected_files:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn file tr∆∞·ªõc khi x·ª≠ l√Ω!")
            return
            
        try:
            initial_term = int(self.initial_term_edit.text().strip())
            ext_term = int(self.ext_term_edit.text().strip())
        except ValueError:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho th·ªùi h·∫°n!")
            return
            
        # Disable UI during processing
        self.process_btn.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        # Create and start worker thread
        self.worker = ProcessingWorker(
            self.selected_files,
            initial_term,
            ext_term,
            self.logger,
            self.auto_proper_cb.isChecked()
        )
        
        self.worker.progress_updated.connect(self.progress_bar.setValue)
        self.worker.status_updated.connect(self.status_label.setText)
        self.worker.finished.connect(self._on_processing_finished)
        self.worker.error_occurred.connect(self._on_processing_error)
        
        self.worker.start()
        self.add_log("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file...")
        
    def _on_processing_finished(self, results: pd.DataFrame, success: bool):
        """X·ª≠ l√Ω khi ho√†n t·∫•t"""
        self.process_btn.setEnabled(True)
        self.progress_bar.setVisible(False)
        
        if success:
            self.add_log("‚úÖ X·ª≠ l√Ω th√†nh c√¥ng!")
            self._update_preview_table(results)
        else:
            self.add_log("‚ö†Ô∏è X·ª≠ l√Ω ho√†n t·∫•t v·ªõi c·∫£nh b√°o. Vui l√≤ng ki·ªÉm tra log.")
            
        # Auto-hide progress after 3 seconds
        QTimer.singleShot(3000, lambda: self.status_label.setText("S·∫µn s√†ng"))
        
    def _on_processing_error(self, error_msg: str):
        """X·ª≠ l√Ω khi c√≥ l·ªói"""
        self.process_btn.setEnabled(True)
        self.progress_bar.setVisible(False)
        self.status_label.setText("L·ªói!")
        
        self.add_log(f"‚ùå L·ªói: {error_msg}")
        QMessageBox.critical(self, "L·ªói", f"C√≥ l·ªói x·∫£y ra:\n{error_msg}")
        
    def _update_preview_table(self, df: pd.DataFrame):
        """C·∫≠p nh·∫≠t b·∫£ng xem tr∆∞·ªõc"""
        if df.empty:
            return
            
        # Ch·ªçn c√°c c·ªôt quan tr·ªçng ƒë·ªÉ hi·ªÉn th·ªã
        preview_cols = [
            col for col in [
                "STT", "ID Video", "T√™n t√°c ph·∫©m", "T√°c gi·∫£",
                "Ng√†y b·∫Øt ƒë·∫ßu", "Th·ªùi h·∫°n k·∫øt th√∫c", "H√¨nh th·ª©c s·ª≠ d·ª•ng"
            ] if col in df.columns
        ]
        
        preview_df = df[preview_cols].head(50)  # Ch·ªâ hi·ªÉn th·ªã 50 d√≤ng ƒë·∫ßu
        
        # Thi·∫øt l·∫≠p table
        self.preview_table.setRowCount(len(preview_df))
        self.preview_table.setColumnCount(len(preview_cols))
        self.preview_table.setHorizontalHeaderLabels(preview_cols)
        
        # ƒêi·ªÅn d·ªØ li·ªáu
        for row_idx, (_, row) in enumerate(preview_df.iterrows()):
            for col_idx, col_name in enumerate(preview_cols):
                item = QTableWidgetItem(str(row[col_name]))
                self.preview_table.setItem(row_idx, col_idx, item)
                
        # Auto-resize columns
        self.preview_table.resizeColumnsToContents()
        header = self.preview_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.Interactive)
        
        self.add_log(f"Hi·ªÉn th·ªã {len(preview_df)} d√≤ng ƒë·∫ßu ti√™n trong b·∫£ng xem tr∆∞·ªõc")
        
    def add_log(self, message: str):
        """Th√™m log"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        self.log_text.append(formatted_message)
        self.logger.info(message)
        
        # Auto-scroll to bottom
        cursor = self.log_text.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        self.log_text.setTextCursor(cursor)