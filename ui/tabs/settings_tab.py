# vcpmctool/ui/tabs/settings_tab.py
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGroupBox,
    QLabel, QCheckBox, QPushButton, QComboBox,
    QSpinBox, QFormLayout, QTextEdit, QMessageBox
)
from PySide6.QtCore import Qt
from PySide6.QtGui import QFont

from services.settings import Settings


class SettingsTab(QWidget):
    """Tab c√†i ƒë·∫∑t"""
    
    def __init__(self, settings: Settings, main_window):
        super().__init__()
        self.settings = settings
        self.main_window = main_window
        
        self._setup_ui()
        
    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        layout = QVBoxLayout(self)
        
        # Title
        title = QLabel("‚öôÔ∏è C√†i ƒë·∫∑t ·ª©ng d·ª•ng")
        title.setFont(QFont("", 18, QFont.Weight.Bold))
        layout.addWidget(title)
        
        # Appearance settings
        appearance_group = self._create_appearance_group()
        layout.addWidget(appearance_group)
        
        # Processing settings
        processing_group = self._create_processing_group()
        layout.addWidget(processing_group)
        
        # Advanced settings
        advanced_group = self._create_advanced_group()
        layout.addWidget(advanced_group)
        
        # About section
        about_group = self._create_about_group()
        layout.addWidget(about_group)
        
        layout.addStretch()
        
        # Action buttons
        button_layout = QHBoxLayout()
        
        self.reset_btn = QPushButton("üîÑ Kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh")
        self.reset_btn.clicked.connect(self._reset_settings)
        button_layout.addWidget(self.reset_btn)
        
        button_layout.addStretch()
        
        self.apply_btn = QPushButton("‚úÖ √Åp d·ª•ng")
        self.apply_btn.clicked.connect(self._apply_settings)
        self.apply_btn.setProperty("class", "primary")
        button_layout.addWidget(self.apply_btn)
        
        layout.addLayout(button_layout)
        
    def _create_appearance_group(self) -> QGroupBox:
        """T·∫°o nh√≥m c√†i ƒë·∫∑t giao di·ªán"""
        group = QGroupBox("üé® Giao di·ªán")
        layout = QFormLayout(group)
        
        # Theme selection
        self.theme_combo = QComboBox()
        self.theme_combo.addItems(["S√°ng", "T·ªëi"])
        self.theme_combo.setCurrentText("T·ªëi" if self.settings.theme_mode == "dark" else "S√°ng")
        layout.addRow("Ch·∫ø ƒë·ªô hi·ªÉn th·ªã:", self.theme_combo)
        
        # Font size
        self.font_size_spin = QSpinBox()
        self.font_size_spin.setRange(8, 16)
        self.font_size_spin.setValue(9)
        self.font_size_spin.setSuffix(" pt")
        layout.addRow("K√≠ch th∆∞·ªõc font:", self.font_size_spin)
        
        return group
        
    def _create_processing_group(self) -> QGroupBox:
        """T·∫°o nh√≥m c√†i ƒë·∫∑t x·ª≠ l√Ω"""
        group = QGroupBox("‚öôÔ∏è X·ª≠ l√Ω d·ªØ li·ªáu")
        layout = QFormLayout(group)
        
        # Auto proper case
        self.auto_proper_cb = QCheckBox("T·ª± ƒë·ªông ƒë·ªãnh d·∫°ng t√™n ri√™ng")
        self.auto_proper_cb.setChecked(self.settings.auto_propercase)
        self.auto_proper_cb.setToolTip("T·ª± ƒë·ªông vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu c·ªßa t·ª´ng t·ª´")
        layout.addRow(self.auto_proper_cb)
        
        # Auto backup
        self.auto_backup_cb = QCheckBox("T·ª± ƒë·ªông sao l∆∞u file g·ªëc")
        self.auto_backup_cb.setChecked(True)
        self.auto_backup_cb.setToolTip("T·∫°o b·∫£n sao l∆∞u tr∆∞·ªõc khi x·ª≠ l√Ω")
        layout.addRow(self.auto_backup_cb)
        
        # Default terms
        self.default_initial_spin = QSpinBox()
        self.default_initial_spin.setRange(1, 10)
        self.default_initial_spin.setValue(2)
        self.default_initial_spin.setSuffix(" nƒÉm")
        layout.addRow("Th·ªùi h·∫°n ban ƒë·∫ßu m·∫∑c ƒë·ªãnh:", self.default_initial_spin)
        
        self.default_ext_spin = QSpinBox()
        self.default_ext_spin.setRange(1, 10)
        self.default_ext_spin.setValue(2)
        self.default_ext_spin.setSuffix(" nƒÉm")
        layout.addRow("Th·ªùi h·∫°n gia h·∫°n m·∫∑c ƒë·ªãnh:", self.default_ext_spin)
        
        return group
        
    def _create_advanced_group(self) -> QGroupBox:
        """T·∫°o nh√≥m c√†i ƒë·∫∑t n√¢ng cao"""
        group = QGroupBox("üîß N√¢ng cao")
        layout = QFormLayout(group)
        
        # Max preview rows
        self.max_preview_spin = QSpinBox()
        self.max_preview_spin.setRange(10, 1000)
        self.max_preview_spin.setValue(50)
        self.max_preview_spin.setSuffix(" d√≤ng")
        layout.addRow("S·ªë d√≤ng xem tr∆∞·ªõc t·ªëi ƒëa:", self.max_preview_spin)
        
        # Log level
        self.log_level_combo = QComboBox()
        self.log_level_combo.addItems(["DEBUG", "INFO", "WARNING", "ERROR"])
        self.log_level_combo.setCurrentText("INFO")
        layout.addRow("M·ª©c ƒë·ªô log:", self.log_level_combo)
        
        # Clear log button
        clear_log_btn = QPushButton("üóëÔ∏è X√≥a log")
        clear_log_btn.clicked.connect(self._clear_log)
        layout.addRow("Qu·∫£n l√Ω log:", clear_log_btn)
        
        return group
        
    def _create_about_group(self) -> QGroupBox:
        """T·∫°o nh√≥m th√¥ng tin"""
        group = QGroupBox("‚ÑπÔ∏è Th√¥ng tin")
        layout = QVBoxLayout(group)
        
        about_text = QTextEdit()
        about_text.setReadOnly(True)
        about_text.setMaximumHeight(120)
        about_text.setHtml("""
        <h3>VCPMC Tool v2.0</h3>
        <p><b>C√¥ng c·ª• x·ª≠ l√Ω d·ªØ li·ªáu t√°c ph·∫©m √¢m nh·∫°c</b></p>
        <p>üîπ X·ª≠ l√Ω file Excel t√°c ph·∫©m<br>
        üîπ T√≠nh to√°n nhu·∫≠n b√∫t t·ª± ƒë·ªông<br>
        üîπ T·∫°o link YouTube v·ªõi timestamp<br>
        üîπ Qu·∫£n l√Ω th·ªùi h·∫°n v√† gia h·∫°n</p>
        <p><i>Ph√°t tri·ªÉn v·ªõi Python + PySide6</i></p>
        """)
        layout.addWidget(about_text)
        
        return group
        
    def _apply_settings(self):
        """√Åp d·ª•ng c√†i ƒë·∫∑t"""
        # Update theme
        new_theme = "dark" if self.theme_combo.currentText() == "T·ªëi" else "light"
        if new_theme != self.settings.theme_mode:
            self.settings.theme_mode = new_theme
            self.main_window.toggle_theme()
            
        # Update other settings
        self.settings.auto_propercase = self.auto_proper_cb.isChecked()
        
        QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ √°p d·ª•ng c√†i ƒë·∫∑t!")
        
    def _reset_settings(self):
        """Kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh"""
        reply = QMessageBox.question(
            self,
            "X√°c nh·∫≠n",
            "B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            # Reset to defaults
            self.theme_combo.setCurrentText("S√°ng")
            self.font_size_spin.setValue(9)
            self.auto_proper_cb.setChecked(True)
            self.auto_backup_cb.setChecked(True)
            self.default_initial_spin.setValue(2)
            self.default_ext_spin.setValue(2)
            self.max_preview_spin.setValue(50)
            self.log_level_combo.setCurrentText("INFO")
            
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh!")
            
    def _clear_log(self):
        """X√≥a file log"""
        reply = QMessageBox.question(
            self,
            "X√°c nh·∫≠n",
            "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a file log?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                import os
                if os.path.exists("vcpmctool.log"):
                    os.remove("vcpmctool.log")
                QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a file log!")
            except Exception as e:
                QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a file log: {e}")